(in-package :annil)

(export '(autoscale-params autoscale-input undo-autoscale-input autoscale undo-autoscale))

(defun autoscale-params-from-matrix (train-set)
  ;; get means and norms from train set
  (let ((dim0 (dim0 train-set))
	(dim1 (dim1 train-set)))
    (let ((col (make-matrix dim0))
	  (means (make-matrix dim1))
	  (norms (make-matrix dim1)))
      (dotimes (j dim1)
	(col train-set j col)
	(setf (aref means j) (mean col))
	;; *2 is a kludge
	;; real way of scaling: Xs=X*inv(diag(std(X)))
	(setf (aref norms j) (* (e-norm col) 2)))
      (list means norms))))

(defun autoscale-params (train-set)
  (patterns-dispatch (train-set)
		     (error "Autoscaling doesn't make sence for single pattern")
		     (error "Autoscaling doesn't make sence for single pattern")
		     (autoscale-params-from-matrix train-set)
		     (autoscale-params-from-matrix (first train-set))
		     (autoscale-params-from-matrix (convert-patterns-to-matrix train-set))
		     (autoscale-params-from-matrix (first (convert-patterns-to-matrix train-set)))))

(defun autoscale-input (input means norms)
  (m/ (m- input means) norms))

(defun undo-autoscale-input (input means norms)
  (m+ (m* input norms) means))

#|
;; pure version
(defun autoscale (patterns means norms)
  (patterns-dispatch (patterns)
		     (autoscale-input (copy patterns) means norms)
		     (list (autoscale-input (copy (first patterns)) means norms)
			   (second patterns))
		     (let ((inputs (make-matrix-like patterns)))
		       (dotimes (i (dim0 inputs))
			 (setf (row inputs i)
			       (autoscale-input (row patterns i) means norms)))
		       inputs)
		     (let ((inputs (make-matrix-like (first patterns))))
		       (dotimes (i (dim0 inputs))
			 (setf (row inputs i)
			       (autoscale-input (row patterns i) means norms)))
		       (list inputs (copy (second patterns))))
		     (mapcar #'(lambda (i) (autoscale-input (copy i) means norms)) patterns)
		     (mapcar #'(lambda (p)
				 (list (autoscale-input (copy (first p)) means norms) (second p)))
			     patterns)))

(defun undo-autoscale (patterns means norms)
  (patterns-dispatch (patterns)
		     (undo-autoscale-input (copy patterns) means norms)
		     (%build-pattern (undo-autoscale-input (copy (first patterns)) means norms)
				     (second patterns)
				     (when (= (length patterns) 3) (third patterns)))
		     (let ((inputs (make-matrix-like patterns)))
		       (dotimes (i (dim0 inputs))
			 (setf (row inputs i)
			       (undo-autoscale-input (row patterns i) means norms)))
		       inputs)
		     (let ((inputs (make-matrix-like (first patterns))))
		       (dotimes (i (dim0 inputs))
			 (setf (row inputs i)
			       (undo-autoscale-input (row patterns i) means norms)))
		       (%build-pattern inputs (copy (second patterns))
				       (when (= (length patterns) 3) (copy (last patterns))))
		     (mapcar #'(lambda (i) (undo-autoscale-input (copy i) means norms)) patterns)
		     (mapcar #'(lambda (p)
				 (%build-pattern (undo-autoscale-input (copy (first p)) means norms) (second p)
						 (when (= (length patterns) 3) (last p))))
			     patterns))))

|#

;; side effects version

(defun autoscale (patterns means norms)
  (patterns-dispatch (patterns)
		     (autoscale-input patterns means norms)
		     (%build-pattern (autoscale-input (first patterns) means norms) (second patterns)
				     (when (= (length patterns) 3) (third patterns)))
		     (dotimes (i (dim0 patterns) patterns)
		       (setf (row patterns i)
			     (autoscale-input (row patterns i) means norms)))
		     (dotimes (i (dim0 (first patterns)) patterns)
		       (setf (row (first patterns) i)
			     (autoscale-input (row (first patterns) i) means norms)))
		     (progn (map nil #'(lambda (i) (autoscale-input i means norms)) patterns) patterns)
		     (progn (map nil #'(lambda (p) (autoscale-input (first p) means norms)) patterns) patterns)))

(defun undo-autoscale (patterns means norms)
  (patterns-dispatch (patterns)
		     (undo-autoscale-input patterns means norms)
		     (%build-pattern (undo-autoscale-input (first patterns) means norms) (second patterns)
				     (when (= (length patterns) 3) (third patterns)))
		     (dotimes (i (dim0 patterns) patterns)
		       (setf (row patterns i)
			     (undo-autoscale-input (row patterns i) means norms)))
		     (dotimes (i (dim0 (first patterns)) patterns)
		       (setf (row (first patterns) i)
			     (undo-autoscale-input (row (first patterns) i) means norms)))
		     (progn (map nil #'(lambda (i) (undo-autoscale-input i means norms)) patterns) patterns)
		     (progn (map nil #'(lambda (p) (undo-autoscale-input (first p) means norms)) patterns) patterns)))
