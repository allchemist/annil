(in-package :annil)

(export '(centering-params centering-input undo-centering-input centering undo-centering))

(defun centering-params-from-matrix (train-set)
  ;; get means from train set
  (let ((dim0 (dim0 train-set))
	(dim1 (dim1 train-set)))
    (let ((col (make-matrix dim0))
	  (means (make-matrix dim1)))
      (dotimes (j dim1)
	(col train-set j col)
	(setf (aref means j) (mean col)))
      means)))

(defun centering-params (train-set)
  (patterns-dispatch (train-set)
		     (error "Centering doesn't make sence for single pattern")
		     (error "Centering doesn't make sence for single pattern")
		     (centering-params-from-matrix train-set)
		     (centering-params-from-matrix (first train-set))
		     (centering-params-from-matrix (convert-patterns-to-matrix train-set))
		     (centering-params-from-matrix (first (convert-patterns-to-matrix train-set)))))

(defun centering-input (input means)
  (m- input means))

(defun undo-centering-input (input means)
  (m+ input means))

;; side effects version

(defun centering (patterns means)
  (patterns-dispatch (patterns)
		     (centering-input patterns means)
		     (list (centering-input (first patterns) means)
			   (second patterns))
		     (dotimes (i (dim0 patterns) patterns)
		       (setf (row patterns i)
			     (centering-input (row patterns i) means)))
		     (dotimes (i (dim0 (first patterns)) patterns)
		       (setf (row (first patterns) i)
			     (centering-input (row (first patterns) i) means)))
		     (progn (map nil #'(lambda (i) (centering-input i means)) patterns) patterns)
		     (progn (map nil #'(lambda (p) (centering-input (first p) means)) patterns) patterns)))

(defun undo-centering (patterns means)
  (patterns-dispatch (patterns)
		     (undo-centering-input patterns means)
		     (list (undo-centering-input (first patterns) means)
			   (second patterns))
		     (dotimes (i (dim0 patterns) patterns)
		       (setf (row patterns i)
			     (undo-centering-input (row patterns i) means)))
		     (dotimes (i (dim0 (first patterns)) patterns)
		       (setf (row (first patterns) i)
			     (undo-centering-input (row (first patterns) i) means)))
		     (progn (map nil #'(lambda (i) (undo-centering-input i means)) patterns) patterns)
		     (progn (map nil #'(lambda (p) (undo-centering-input (first p) means)) patterns) patterns)))
