(in-package :annil)

(defun visual-test-2d (network num in-range out-range classify-range)
  (let (class1 class2 unclassified)
    (dotimes (i num)
      (let* ((in (make-matrix 2 :initial-contents
			      `(,(random-value (first in-range))
				 ,(random-value (second in-range)))))
	     (out (eval-network network in)))
	(cond ((< (elt out 0) (+ (first out-range) classify-range))
	       (push (list in out) class1))
	      ((> (elt out 0) (- (second out-range) classify-range))
	       (push (list in out) class2))
	      (t (push (list in out) unclassified)))))
    (gplt:gplt-restart)
    (map nil #'gplt:gplt-exec
	 `((unset key)
	   (unset color)
	   (plot "'-' pt 7 ps 0.5, '-' pt 7 ps 0.5, '-' pt 7 ps 0.5")))
    (dolist (p class1)
      (gplt:gplt-exec `(,(elt (first p) 0) ,(elt (first p) 1))))
    (gplt:gplt-exec '(e))
    (dolist (p class2)
      (gplt:gplt-exec `(,(elt (first p) 0) ,(elt (first p) 1))))
    (gplt:gplt-exec '(e))
    (dolist (p unclassified)
      (gplt:gplt-exec `(,(elt (first p) 0) ,(elt (first p) 1))))
    (gplt:gplt-exec '(e))

    (gplt:gplt-display)))
