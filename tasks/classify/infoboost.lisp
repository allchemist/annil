(in-package :annil)

(export '(infoboost-classifier boost-classifiers boost-preproc make-infoboost-classifier))

(defclass infoboost-classifier ()
  ((classifiers :initarg :classifiers :accessor boost-classifiers)
   (preproc :initarg :preproc :accessor boost-preproc)))

(defmethod eval-network ((network infoboost-classifier) input)
  (let ((sum 0.0)
	(preproc (boost-preproc network)))
    (dolist (c (boost-classifiers network))
      (let ((val (aref (eval-network (first c) (if preproc (encode preproc input) input)) 0)))
	(incf sum (* (if (minusp val) (third c) (second c)) val))))
    (make-matrix 1 :initial-element (signum sum))))

(defun infoboost-alpha (q)
  (* 0.5 (log (/ (+ 1.0 q) (- 1.0 q)))))

(defun infoboost-classifier-quality (classifier patterns)
  (let ((q+ 0.0)   (q- 0.0)
	(sum+ 0.0) (sum- 0.0))
    (do-patterns-safe (patterns p)
      (let ((aim (aref (second p) 0))
	    (val (if (nth-value 1 (classify classifier p)) 1.0 -1.0))
	    (w (tanh (elt p 2))))
	(cond ((= val 1.0)
	       (incf sum+ w)
	       (incf q+ (* w aim)))
	      ((= val -1.0)
	       (incf sum- w)
	       (decf q- (* w aim))))))
    (values (infoboost-alpha (/ q+ sum+)) (infoboost-alpha (/ q- sum-)))))

(defun make-infoboost-classifier (patterns train-single-fn params &optional preproc)
  (let (cls
	(npats (num-patterns patterns))
	(pats (convert-patterns-to-svector patterns))
	(verbosity (param params :verbosity)))
    (when verbosity (info "Initiating InfoBoost classifier training~%"))
    (if preproc (setf pats (encode preproc pats)))
    (unless (patterns-with-weights-p patterns)
      (progn (dotimes (i npats)
	       (let ((p (svref pats i)))
		 (setf (svref pats i) (list (first p) (second p) (float (/ npats))))))
	     (normalize-patterns-weights pats)))
    (dotimes (n (param params :max-num))
      (when verbosity (info "Training ~A'th weak classifier~%" (1+ n)))
	(let ((c (funcall train-single-fn pats)))
	  (multiple-value-bind (q+ q-)
	      (infoboost-classifier-quality c pats)
	    (flet ((a (out) (if (minusp out) q- q+)))
	      (dotimes (i npats)
		(let ((p (svref pats i)))
		  (let ((val (aref (eval-network c (first p)) 0)))
		    (setf (elt p 2)
			  (* (elt p 2)
			     (log (+ 1.0 (exp (- (* (a val) (aref (second p) 0) val)))))))))))
	    (normalize-patterns-weights pats)
	    (push (list c q+ q-) cls))))
    (let ((bc (make-instance 'infoboost-classifier :classifiers (nreverse cls) :preproc preproc)))
      (when verbosity
	(multiple-value-bind (err neg-bits pos-bits)
	    (compute-network-err bc patterns 1.0)
	  (info "Boost clasifier quality: error-sum= ~A, error-bits= ~A / ~A~%" err neg-bits pos-bits)))
      bc)))
